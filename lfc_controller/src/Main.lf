target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  }
}

import Serial from "lib/Serial.lf"
import QDEC from "lib/Encoder.lf"
import DAC from "lib/DAC.lf"
import PID_Controller from "lib/PID.lf"

preamble {=
  #include <stdio.h>
  #include "stm32f4xx_hal.h"
  #include "stm32_startup.h"
=}

// Import and/or declare reactor classes.
main reactor {
  preamble {=
    static void MX_GPIO_Init(void) {
        GPIO_InitTypeDef GPIO_InitStruct = {0};

        __HAL_RCC_GPIOH_CLK_ENABLE();
        __HAL_RCC_GPIOA_CLK_ENABLE();

        /*Configure GPIO pin Output Level */
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);

        /*Configure GPIO pin : LD5_Pin */
        GPIO_InitStruct.Pin = GPIO_PIN_4;
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    }
  =}

  timer t(0 ms, 10 ms)  // Define timers
  timer update(0 ms, 100 ms)

  ser = new Serial()    // Define external reactors
  qdec = new QDEC()
  dac = new DAC()
  pid_controller = new PID_Controller()

  state counter: int = 0
  state encoder_count: int32_t = 0
  state sign: int = 1

  qdec.read -> pid_controller.current_pos
  pid_controller.out -> dac.setvalue

  reaction(startup) {=
    // Initialize GPIOs
    MX_GPIO_Init();

    // Initial print
    printf("hello world\r\n");
  =}

  // Timer Reactors
  reaction(t) -> pid_controller.target_pos {=
    if (self->sign == 1) {
      self->counter = self->counter + 10;
    } else {
      self->counter = self->counter - 10;
    }

    lf_set(pid_controller.target_pos, 0);
    // lf_set(dac.setvalue, self->counter);


    // printf("counter: %d\r\n", self->counter);

    if(self->counter >= 4090) {
      self->sign = 0;
    }
    if(self->counter <= 0) {
      self->sign = 1;
    }
  =}

  // Getter /Setter Reactions
  reaction(update) -> qdec.trigger {=
    lf_set(qdec.trigger, true);
    // printf("encoder: %d\r\n", qdec.read->value);
  =}

  reaction(pid_controller.out) {=
    bool val = pid_controller.out->value < 0;
    printf("out: %ld\r\n", pid_controller.out->value);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, val);
  =}

  reaction(qdec.read) {=
    self->encoder_count = qdec.read->value;
    // printf("encoder: %ld\r\n", self->encoder_count);
  =}
}
