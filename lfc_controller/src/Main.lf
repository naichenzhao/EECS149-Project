target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  },
  keepalive: true
}

import QDEC from "lib/Encoder.lf"  // import Serial from "lib/Serial.lf"
import DAC from "lib/DAC.lf"
import PID_Controller from "lib/PID.lf"

preamble {=
  #include <stdio.h>
  #include "stm32f4xx_hal.h"
  #include "stm32_startup.h"
=}

// Import and/or declare reactor classes.
main reactor {
  preamble {=
    UART_HandleTypeDef huart1;
    static void* action;

    uint8_t rx_data[6];
    uint8_t rx_buffer[100];

    static void MX_GPIO_Init(void) {
        GPIO_InitTypeDef GPIO_InitStruct = {0, 0};

        __HAL_RCC_GPIOH_CLK_ENABLE();
        __HAL_RCC_GPIOA_CLK_ENABLE();

        /*Configure GPIO pin Output Level */
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);

        /*Configure GPIO pin : LD5_Pin */
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    }

    static void MX_USART1_UART_Init(void) {
      huart1.Instance = USART1;
      huart1.Init.BaudRate = 115200;
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
      huart1.Init.StopBits = UART_STOPBITS_1;
      huart1.Init.Parity = UART_PARITY_NONE;
      huart1.Init.Mode = UART_MODE_TX_RX;
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
      if (HAL_UART_Init(&huart1) != HAL_OK)
      {
        Error_Handler();
      }
    }

    void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
      // printf("recieved %d \r\n", rx_data[0]);
      HAL_UART_Receive_IT(&huart1, rx_data, 1);

      if (rx_data[0] > 200) {
        change_FC();
      }

    }

    void change_FC() {
      printf("Triggered Action \r\n");
      lf_schedule(action, 0);
    }
  =}

  timer change_pos(0 ms, 5000 ms)  // Define timers
  timer update(0 ms, 10 ms)

  qdec = new QDEC()                 // ser = new Serial()                // Define external reactors
  dac = new DAC()
  pid_controller = new PID_Controller()

  state pos: int = 10000
  state encoder_count: int32_t = 0
  state sign: int = 1

  qdec.read -> pid_controller.current_pos
  pid_controller.out -> dac.setvalue

  physical action force_triggered

  reaction(startup) {=
    // Initialize GPIOs
    MX_GPIO_Init();
    MX_USART1_UART_Init();
    HAL_UART_Receive_IT(&huart1, rx_data, 1);

    // Initial print
    printf("Starting up...\r\n");
  =}

  reaction(startup) -> force_triggered {=
    action = force_triggered;
  =}

  initial mode POS_CONTROL {
    reaction(force_triggered) -> reset(FORCE_CONTROL) {=
      lf_set_mode(FORCE_CONTROL);
      self->pos = 0;
      printf("Force Detected \r\n");
    =}
  }

  mode FORCE_CONTROL {
    reaction(change_pos) -> reset(POS_CONTROL) {=
      lf_set_mode(POS_CONTROL);
      printf("Returning State \r\n");
    =}
  }

  reaction(change_pos) {=
    if (self->pos < 0) {
      self->pos = 0;
    } else {
      self->pos = -10000;
    }
    printf("current state: %d \r\n", self->pos);
  =}

  // Timer Reactors
  reaction(update) -> pid_controller.target_pos {=
    lf_set(pid_controller.target_pos, self->pos);
  =}

  reaction(update) -> qdec.trigger {=
    lf_set(qdec.trigger, true);
  =}

  reaction(qdec.read) {=
    self->encoder_count = qdec.read->value;
  =}
}
