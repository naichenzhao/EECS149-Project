target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  }
}

preamble {=
  #include "stm32f4xx_hal.h"
  #include <stdio.h>
=}

reactor PID_Controller(Kp: float = 0.2, Ki: float = 0.1, Kd: float = 0.1) {
  input current_pos: int32_t
  input target_pos: int32_t
  output out: int32_t

  state last_pos: int32_t = 0  // to help with state variables
  state prev_time: time = 0
  state Kw: float = 0.9

  state error_i: float = 0     // Integral error

  reaction(target_pos, current_pos) -> out {=
    instant_t now = lf_time_logical();
    interval_t interval = now - self->prev_time;

    float error_p = target_pos->value - current_pos->value;
    float error_d = (current_pos->value - self->last_pos) / interval;
    self->error_i = error_p + (self->Kw * self->error_i);

    float pid_out = self->Kp * error_p + self->Ki * self->error_i + self->Kd * error_d;
    lf_set(out, pid_out);

    self->last_pos = current_pos->value;
    self->prev_time = now;
  =}
}
