target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  }
}

preamble {=
  #include "stm32f4xx_hal.h"
  #include "stm32_startup.h"
  #include <stdio.h>
=}

reactor Serial {
  input trigger: bool
  output read: uint8_t*

  preamble {=
    extern UART_HandleTypeDef huart2;
    UART_HandleTypeDef huart1;
    uint8_t rx_data[6];
    uint8_t rx_buffer[100];

    static void MX_USART1_UART_Init(void) {
      huart1.Instance = USART1;
      huart1.Init.BaudRate = 115200;
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
      huart1.Init.StopBits = UART_STOPBITS_1;
      huart1.Init.Parity = UART_PARITY_NONE;
      huart1.Init.Mode = UART_MODE_TX_RX;
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
      if (HAL_UART_Init(&huart1) != HAL_OK)
      {
        Error_Handler();
      }
    }

    void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {

      printf("recieved % \r\n", rx_data[0]);
      HAL_UART_Receive_IT(&huart1, rx_data, 1);

    }
  =}

  reaction(startup) {=
    MX_USART1_UART_Init();
    HAL_UART_Receive_IT(&huart1, rx_data, 1);
  =}

  reaction(trigger) -> read {=
    printf("triggered: %d \r\n", rx_data[0]);
    lf_set(read, rx_data);
  =}
}
