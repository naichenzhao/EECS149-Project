// Other options: Python, Cpp, TypeScript, Rust.
target C {
  single-threaded: true,
  platform: {
    name: "stm32",
    board: "F446RE"
  }
}

preamble {=
  #include <stdio.h>
  #include "stm32f4xx_hal.h"

  #define LD5_Pin GPIO_PIN_5
  #define LD5_GPIO_Port GPIOA
=}

// Import and/or declare reactor classes.
main reactor {
  preamble {=
    UART_HandleTypeDef huart2;

    int _write(int file, char *ptr, int len) {
        HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
        return len;
    }

    static void MX_USART2_UART_Init(void) {
        huart2.Instance = USART2;
        huart2.Init.BaudRate = 115200;
        huart2.Init.WordLength = UART_WORDLENGTH_8B;
        huart2.Init.StopBits = UART_STOPBITS_1;
        huart2.Init.Parity = UART_PARITY_NONE;
        huart2.Init.Mode = UART_MODE_TX_RX;
        huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
        huart2.Init.OverSampling = UART_OVERSAMPLING_16;
    }

    static void MX_GPIO_Init(void)
    {
        GPIO_InitTypeDef GPIO_InitStruct = {0};

        __HAL_RCC_GPIOA_CLK_ENABLE();

        /*Configure GPIO pin Output Level */
        HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);

        /*Configure GPIO pin : LD5_Pin */
        GPIO_InitStruct.Pin = LD5_Pin;
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
        HAL_GPIO_Init(LD5_GPIO_Port, &GPIO_InitStruct);
    }
  =}

  timer t(500 ms, 1000 ms)
  timer t2(0, 1000 ms)
  state counter: int = 0

  reaction(startup) {=
    // Initialize GPIOs
    MX_USART2_UART_Init();
    MX_GPIO_Init();

    // Initial print
    printf("hello world\r\n");
  =}

  reaction(t) {=
    HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
  =}

  reaction(t2) {=
    printf("Timer2 print. Counter: %d\r\n", self->counter);
    self->counter = self->counter + 1;
    HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
  =}
}
